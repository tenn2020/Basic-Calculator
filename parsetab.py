
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left?:leftEQUALITYleftNOTEQUALleftMODULOleftPLUSMINUSleftTIMESDIVIDEleftPOWERrightUMINUSDIVIDE EQUALITY EQUALS LPAREN MINUS MODULO NAME NOTEQUAL NUMBER PLUS POWER RPAREN TIMESstatement : NAME EQUALS expressionstatement : expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression EQUALITY expression\n                  | expression NOTEQUAL expression\n                  | expression POWER expression\n                  | expression MODULO expression\n    expression : expression '?' expression ':' expression\n  expression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME"
    
_lr_action_items = {'NAME':([0,4,5,7,8,9,10,11,12,13,14,15,16,31,],[2,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,],[4,-15,9,4,4,-14,4,4,4,4,4,4,4,4,4,4,-12,-15,9,9,-3,-4,-5,-6,9,9,-9,9,9,-13,4,9,]),'LPAREN':([0,4,5,7,8,9,10,11,12,13,14,15,16,31,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NUMBER':([0,4,5,7,8,9,10,11,12,13,14,15,16,31,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,6,17,18,20,21,22,23,24,25,26,27,28,30,32,],[0,-15,-2,-14,-12,-15,-1,-3,-4,-5,-6,-7,-8,-9,-10,-13,-11,]),'EQUALS':([2,],[7,]),'PLUS':([2,3,6,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,],[-15,8,-14,-12,-15,8,8,-3,-4,-5,-6,8,8,-9,8,8,-13,8,]),'TIMES':([2,3,6,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,],[-15,10,-14,-12,-15,10,10,10,10,-5,-6,10,10,-9,10,10,-13,10,]),'DIVIDE':([2,3,6,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,],[-15,11,-14,-12,-15,11,11,11,11,-5,-6,11,11,-9,11,11,-13,11,]),'EQUALITY':([2,3,6,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,],[-15,12,-14,-12,-15,12,12,-3,-4,-5,-6,-7,-8,-9,-10,12,-13,12,]),'NOTEQUAL':([2,3,6,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,],[-15,13,-14,-12,-15,13,13,-3,-4,-5,-6,13,-8,-9,-10,13,-13,13,]),'POWER':([2,3,6,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,],[-15,14,-14,-12,-15,14,14,14,14,14,14,14,14,-9,14,14,-13,14,]),'MODULO':([2,3,6,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,],[-15,15,-14,-12,-15,15,15,-3,-4,-5,-6,15,15,-9,-10,15,-13,15,]),'?':([2,3,6,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,],[-15,16,-14,-12,-15,16,16,-3,-4,-5,-6,-7,-8,-9,-10,16,-13,-11,]),'RPAREN':([6,17,18,19,21,22,23,24,25,26,27,28,30,32,],[-14,-12,-15,30,-3,-4,-5,-6,-7,-8,-9,-10,-13,-11,]),':':([6,17,18,21,22,23,24,25,26,27,28,29,30,32,],[-14,-12,-15,-3,-4,-5,-6,-7,-8,-9,-10,31,-13,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,7,8,9,10,11,12,13,14,15,16,31,],[3,17,19,20,21,22,23,24,25,26,27,28,29,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','main.py',75),
  ('statement -> expression','statement',1,'p_statement_expr','main.py',79),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','main.py',83),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','main.py',84),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','main.py',85),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','main.py',86),
  ('expression -> expression EQUALITY expression','expression',3,'p_expression_binop','main.py',87),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binop','main.py',88),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','main.py',89),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','main.py',90),
  ('expression -> expression ? expression : expression','expression',5,'p_expression_elvis','main.py',104),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','main.py',110),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','main.py',114),
  ('expression -> NUMBER','expression',1,'p_expression_number','main.py',118),
  ('expression -> NAME','expression',1,'p_expression_name','main.py',122),
]
